syntax = "proto3";

package opentelemetry.proto.collector.metrics.v1;

option csharp_namespace = "OpenTelemetry.Proto.Collector.Metrics.V1";

// Service for collecting metric data
service MetricsService {
  rpc Export(ExportMetricsServiceRequest) returns (ExportMetricsServiceResponse) {}
}

message ExportMetricsServiceRequest {
  repeated ResourceMetrics resource_metrics = 1;
}

message ExportMetricsServiceResponse {
  ExportMetricsPartialSuccess partial_success = 1;
}

message ExportMetricsPartialSuccess {
  int64 rejected_data_points = 1;
  string error_message = 2;
}

message ResourceMetrics {
  Resource resource = 1;
  repeated ScopeMetrics scope_metrics = 2;
}

message ScopeMetrics {
  InstrumentationScope scope = 1;
  repeated Metric metrics = 2;
}

message Metric {
  string name = 1;
  string description = 2;
  string unit = 3;
  oneof data {
    Gauge gauge = 4;
    Sum sum = 5;
    Histogram histogram = 6;
  }
}

message Gauge {
  repeated NumberDataPoint data_points = 1;
}

message Sum {
  repeated NumberDataPoint data_points = 1;
  AggregationTemporality aggregation_temporality = 2;
  bool is_monotonic = 3;
}

message Histogram {
  repeated HistogramDataPoint data_points = 1;
  AggregationTemporality aggregation_temporality = 2;
}

message NumberDataPoint {
  repeated KeyValue attributes = 1;
  uint64 start_time_unix_nano = 2;
  uint64 time_unix_nano = 3;
  oneof value {
    double as_double = 4;
    int64 as_int = 5;
  }
}

message HistogramDataPoint {
  repeated KeyValue attributes = 1;
  uint64 start_time_unix_nano = 2;
  uint64 time_unix_nano = 3;
  uint64 count = 4;
  double sum = 5;
  repeated uint64 bucket_counts = 6;
  repeated double explicit_bounds = 7;
}

enum AggregationTemporality {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0;
  AGGREGATION_TEMPORALITY_DELTA = 1;
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2;
}

// Reuse types from other services
message Resource {
  repeated KeyValue attributes = 1;
}

message InstrumentationScope {
  string name = 1;
  string version = 2;
  repeated KeyValue attributes = 3;
}

message KeyValue {
  string key = 1;
  AnyValue value = 2;
}

message AnyValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    ArrayValue array_value = 5;
    KeyValueList kvlist_value = 6;
    bytes bytes_value = 7;
  }
}

message ArrayValue {
  repeated AnyValue values = 1;
}

message KeyValueList {
  repeated KeyValue values = 1;
}